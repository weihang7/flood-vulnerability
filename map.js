(function () {
  "use strict";
  var url1 = "lim";
  var url2 = "soilw";
  var url3 = "nws_precip_last7days_observed_20170121";
  var hsv2rgb = function (h, s, v) {
    // adapted from http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/
    var rgb;
    var i;
    var data = [];
    if (s === 0) {
      rgb = [v,v,v];
    } else {
      h = h / 60;
      i = Math.floor(h);
      data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];
      switch(i) {
        case 0:
        rgb = [v, data[2], data[0]];
        break;
        case 1:
        rgb = [data[1], v, data[0]];
        break;
        case 2:
        rgb = [data[0], v, data[2]];
        break;
        case 3:
        rgb = [data[0], data[1], v];
        break;
        case 4:
        rgb = [data[2], data[0], v];
        break;
        default:
        rgb = [v, data[0], data[1]];
      }
    }
    return "#" + rgb.map(function(x){
      return ("0" + Math.round(x*255).toString(16)).slice(-2);
    }).join("");
  };
  window.onload = function() {
    var googleMap = new google.maps.Map(
      document.getElementById("map"), {
        center: new google.maps.LatLng(39.9526, -75.1652),
        zoom: 11,
        mapTypeId: "terrain"
      });
      shp(url1).then(function(data){
        data.features.forEach(function(feature, i){
          var coordinates = feature.geometry.coordinates[0].map(function (x) {
            return {
              "lat": x[1],
              "lng": x[0]
            };
          });
          var val = Math.pow(Math.pow(10, feature.properties.REFC / 10) / 200, 5.0/8) * 2;
          var h = Math.floor((100 - val) * 120 / 100);
          var s = Math.abs(val - 50) / 50;
          var v = 1;
          feature.polygon = new google.maps.Polygon({
            paths: coordinates,
            strokeWeight: 0,
            fillColor: hsv2rgb(h, s, v)
          });
          feature.polygon.setMap(googleMap);
        });
      });
      shp(url2).then(function(data){
        data.features.forEach(function(feature, i){
          var coordinates = {
            "lat": feature.geometry.coordinates[1],
            "lng": feature.geometry.coordinates[0]
          };
          if (-75.3 < coordinates.lng && coordinates.lng < -74.95 && 39.85 < coordinates.lat && coordinates.lat < 40.13) {
            console.log(feature.properties);
            var val = parseFloat(feature.properties.SOILW);
            console.log(val);
            var h = Math.floor((100 - val) * 120 / 100);
            var s = Math.abs(val - 50) / 50;
            var v = 1;
            feature.marker = new google.maps.Marker({
              position: coordinates,
              title: val.toString()
            });
            feature.marker.setMap(googleMap);
          }
        });
      });
      shp(url3).then(function(data){
        var processed = new Array(1000);
        data.features.forEach(function(feature, i){
          if (-75.5 < feature.properties.LON && feature.properties.LON < -74.5 && 39.5 < feature.properties.LAT && feature.properties.LAT < 40.5) {
            if (!(processed[feature.properties.HRAPX] instanceof Array)) {
              processed[feature.properties.HRAPX] = new Array(1000);
            }
            processed[feature.properties.HRAPX][feature.properties.HRAPY] = feature;
          }
        });
        console.log(processed);
        processed.forEach(function(row, i) {
          if (processed[i+1] == undefined) return;
          var iterator = row.entries();
          for(let e of iterator) {
            var j = e[0];
            if (e[1] == undefined) continue;
            var coordinates = [];
            coordinates[0] = processed[i][j];
            coordinates[1] = processed[i][j+1];
            coordinates[2] = processed[i+1][j+1];
            coordinates[3] = processed[i+1][j];
            coordinates[4] = coordinates[0];
            if (coordinates.includes(undefined)) return;
            coordinates = coordinates.map(function(x) {
              return {
                'lat': x.properties.LAT,
                'lng': x.properties.LON
              };
            });
            var feature = e[1];
            var val = feature.properties.GLOBVALUE * 100;
            var h = Math.floor((100 - val) * 120 / 100);
            var s = Math.abs(val - 50) / 50;
            var v = 1;
            feature.polygon = new google.maps.Polygon({
              paths: coordinates,
              strokeWeight: 0,
              fillColor: hsv2rgb(h, s, v)
            });
            feature.polygon.setMap(googleMap);
          }
        });
      });
    };
}());
