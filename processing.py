import rasterio
import rasterio.features
import rasterio.warp
from rasterio import Affine
import numpy as np
from rasterio.warp import reproject, Resampling

DOWNSAMPLING_FACTOR = 40

with rasterio.open('3m/PAMAP_DEM_mosaic_Philadelphia_3m.tif') as dataset:
    print("loaded")
    window=((0, 500), (0, 500))
    arr = dataset.read(1, masked=True)
    kwargs = dataset.meta.copy()
    """
    kwargs.update({
        'height': window[0][1] - window[0][0],
        'width': window[1][1] - window[1][0],
        'transform': dataset.window_transform(window)
    })
    with rasterio.open('3m/cropped.tif', 'w', **kwargs) as dst:
        dst.write(arr, indexes=1, window=window)
    """
    arr = dataset.read(masked=True)
    print(arr.shape)
    newarr = np.empty(shape=(arr.shape[0],  # same number of bands
                             round(arr.shape[1] / DOWNSAMPLING_FACTOR), # 10% resolution
                             round(arr.shape[2] / DOWNSAMPLING_FACTOR)), dtype=np.float32)

    # adjust the new affine transform to the 1000% bigger cell size
    aff = dataset.transform
    newaff = Affine(aff.a * DOWNSAMPLING_FACTOR, aff.b, aff.c,
                    aff.d, aff.e * DOWNSAMPLING_FACTOR, aff.f)
    reproject(
        arr, newarr,
        src_transform = aff,
        dst_transform = newaff,
        src_crs = dataset.crs,
        dst_crs = dataset.crs,
        resample = Resampling.bilinear)
    with rasterio.open('3m/cropped.tif', 'w', **kwargs) as dst:
        dst.write(newarr)
    # Extract feature shapes and values from the array.
    cnt = 0
    for geom, val in rasterio.features.shapes(
            newarr[0], transform=dataset.transform):

        # Transform shapes from the dataset's own coordinate
        # reference system to CRS84 (EPSG:4326).
        # geom = rasterio.warp.transform_geom(
        #    dataset.crs, 'EPSG:4326', geom, precision=6)

        # Print GeoJSON shapes to stdout.
        #print(geom)
        #print(val)
        cnt += 1
    print(cnt)
