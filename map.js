var url = "lim";
var hsv2rgb = function(h, s, v) {
  // adapted from http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/
  var rgb, i, data = [];
  if (s === 0) {
    rgb = [v,v,v];
  } else {
    h = h / 60;
    i = Math.floor(h);
    data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];
    switch(i) {
      case 0:
        rgb = [v, data[2], data[0]];
        break;
      case 1:
        rgb = [data[1], v, data[0]];
        break;
      case 2:
        rgb = [data[0], v, data[2]];
        break;
      case 3:
        rgb = [data[0], data[1], v];
        break;
      case 4:
        rgb = [data[2], data[0], v];
        break;
      default:
        rgb = [v, data[0], data[1]];
        break;
    }
  }
  return '#' + rgb.map(function(x){
    return ("0" + Math.round(x*255).toString(16)).slice(-2);
  }).join('');
};

shp(url).then(function(data){
	var googleMap = new google.maps.Map(
		document.getElementById('map'), {
			center: new google.maps.LatLng(39.9526, -75.1652),
			zoom: 11,
			mapTypeId: 'terrain'
		}
	);
	var infowindow = new google.maps.InfoWindow();
	data.features.forEach(function(feature, i){
    var coordinates = feature.geometry.coordinates[0].map(function (x) {
      return {
        'lat': x[1],
        'lng': x[0]
      }
    });
    val = Math.pow(Math.pow(10, feature.properties.REFC / 10) / 200, 5.0/8) * 2;
    var h = Math.floor((100 - val) * 120 / 100);
    var s = Math.abs(val - 50) / 50;
    var v = 1;
		feature.polygon = new google.maps.Polygon({
			paths: coordinates,
      strokeWeight: 0.5,
      fillColor: hsv2rgb(h, s, v)
		});
		feature.polygon.setMap(googleMap);
	});
});
